public class Pet {
    private String type;

    public Pet(String type) {
        this.type = type;
    }

    public String getType() {
        return type;
    }

}


public class Dog extends Pet{
    public Dog(){
        super("dog");
    }
}


public class Cat extends Pet{
    public Cat(){
        super("dog");
    }
}

/**
 * Demo class
 * 实现一种猫狗队列
 * 实现add添加实例到队列中
 * 实现pollAll方法，将队列中所有实例依次弹出
 * 实现pollDog方法，将队列中dog实例依次弹出
 * 实现pollCat方法，将队列中cat实例依次弹出
 * 实现isEmpty方法，检查队列中是否有dog或cat实例
 * 实现isDogEmpty方法，检查队列中是否有dog类实例
 * 实现isCatEmpty方法，检查队列中是否有cat类实例
 * @author dys
 * @date 2020/10/28
 */
 
 /**
 * Demo class
 * 实现一种猫狗队列
 * 实现add添加实例到队列中
 * 实现pollAll方法，将队列中所有实例依次弹出
 * 实现pollDog方法，将队列中dog实例依次弹出
 * 实现pollCat方法，将队列中cat实例依次弹出
 * 实现isEmpty方法，检查队列中是否有dog或cat实例
 * 实现isDogEmpty方法，检查队列中是否有dog类实例
 * 实现isCatEmpty方法，检查队列中是否有cat类实例
 * @author dys
 * @date 2020/10/28
 */

public class PetEnterQueue {
    private Pet pet;
    private long count;
    
    public PetEnterQueue(Pet pet,long count){
        this.pet = pet;
        this.count = count;
    }

    public Pet getPet() {
        return pet;
    }

    public long getCount() {
        return count;
    }
    
    public String getEnterPetType(){
        return this.pet.getType();
    }
}

// 对应方法的实现

import java.util.LinkedList;
import java.util.Queue;

public class DogCatQueue {
    
    private Queue<PetEnterQueue> dogQ;
    private Queue<PetEnterQueue> catQ;
    private long count;
    String dogType = "dog";
    String catType = "cat";
    
    public DogCatQueue(){
        this.dogQ = new LinkedList<PetEnterQueue>();
        this.catQ = new LinkedList<PetEnterQueue>();
        this.count = 0;
    }
    public void add(Pet pet){
        if (dogType.equals(pet.getType())){
            this.dogQ.add(new PetEnterQueue(pet,this.count++));
        }else if (catType.equals(pet.getType())){
            this.catQ.add(new PetEnterQueue(pet,this.count++));
        }else {
            throw new RuntimeException("err,not dog or cat!");
        }
    }
    
    public Pet pollAll(){
        if (!this.dogQ.isEmpty() && !this.catQ.isEmpty()){
            if (this.dogQ.peek().getCount() < this.catQ.peek().getCount()){
                return this.dogQ.poll().getPet();
            }else {
                return this.catQ.poll().getPet();
            }
        }else if (!this.dogQ.isEmpty()){
            return this.dogQ.poll().getPet();
        }else if (!this.catQ.isEmpty()){
            return this.catQ.poll().getPet();
        }else {
            throw new RuntimeException("err,queue is empty!");
        }
    }
    public Dog pollDog(){
        if (!this.isDogQueueEmpty()){
            return (Dog) this.dogQ.poll().getPet();
        }else {
            throw new RuntimeException("err, dog queue is empty!");
        }
    }
    
    public Cat pollCat(){
        if (!this.isCatQueueEmpty()){
            return (Cat) this.catQ.poll().getPet();
        }else {
            throw new RuntimeException("err, dog queue is empty!");
        }        
    }
    public boolean isEmpty(){
        return this.dogQ.isEmpty() && this.catQ.isEmpty();
    }
    public boolean isDogQueueEmpty(){
        return this.dogQ.isEmpty();
    }
    public boolean isCatQueueEmpty(){
        return this.catQ.isEmpty();
    }
}

 
 
 
