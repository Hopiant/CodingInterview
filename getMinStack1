import java.util.Stack;
/**
 * Demo class
 * 在实现栈的基本功能的基础上，可以返回栈中最小元素的操作
 * @author dys
 * @date 2020/10/27
 */

public class MyStack1 {
        public Stack<Integer> stackData;
        public Stack<Integer> stackMin;

        public MyStack1(){
            this.stackData = new Stack<Integer>();
            this.stackMin = new Stack<Integer>();
        }
        public void push(int newNum){
            if (this.stackMin.isEmpty()){
                this.stackMin.push(newNum);
            }else if (newNum<=this.getmin()){
                this.stackMin.push(newNum);
            }
            this.stackData.push(newNum);
        }
        public int getmin(){
            if (this.stackMin.isEmpty()){
                throw new RuntimeException("Your stack is empty!");
            }
            return this.stackMin.peek();
        }
        public int pop(){
            if (this.stackData.isEmpty()){
                throw new RuntimeException("Your stack is empty!");
            }
            int value = this.stackData.pop();
            if (value==this.getmin()){
                this.stackMin.pop();
            }
            return value;
        }

    public static void main(String[] args) {
        MyStack1 myStack1 = new MyStack1();
        myStack1.push(3);
        myStack1.push(5);
        myStack1.push(1);
        myStack1.push(2);
        myStack1.push(4);
        System.out.println(myStack1.stackData);
        System.out.println(myStack1.stackMin);
        System.out.println(myStack1.getMin());

    }

}
