import java.util.Stack;

/**
 * Demo class
 * 用一个栈实现另一个栈的排序，栈中元素为整型
 * 需要将该栈从顶到底按从大到小的顺序排列，只允许申请一个栈
 * 方法如下：
 * 需要排序的栈为stack，申请的辅助栈为help，在stack上pop操作，弹出元素为cur
 * 如果cur小于或等于help栈顶元素，则将cur直接压入help
 * 如果cur大于help栈顶元素，则将help的元素逐一弹出，逐一压入stack直到cur小于等于help的栈顶元素
 * 再将cur压入help，再将help所有元素压入stack
 * @author dys
 * @date 2020/10/27
 */
public class SortStack {
    public static void sortStack(Stack<Integer> stack){
        Stack<Integer> help = new Stack<Integer>();
        while (!stack.isEmpty()){
            int cur = stack.pop();
            while (!help.isEmpty() && help.peek() < cur){
                stack.push(help.pop());
            }
            help.push(cur);
        }
        while (!help.isEmpty()){
            stack.push(help.pop());
        }
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(3);
        stack.push(1);
        stack.push(4);
        stack.push(2);
        stack.push(5);
        System.out.println(stack);
        sortStack(stack);
        System.out.println(stack);
    }
}
